# .github/workflows/ci-cd.yml
name: CI/CD

on:
  pull_request:
    branches:
      - main

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: 'datn-fe'
jobs:
  path_filter:
    name: Check for path changes
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read
    outputs:
      presentation_changed: ${{ steps.filter.outputs.presentation }}
      container_changed: ${{ steps.filter.outputs.container }}
      something_changed: ${{ steps.filter.outputs.presentation == 'true' || steps.filter.outputs.container == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            presentation:
              - 'presentation/**'
            container:
              - 'container/**'

  ci:
    name: Build and Test
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: path_filter
    if: needs.path_filter.outputs.something_changed == 'true'
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/package.json', '**/pnpm-lock.yaml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-${{ hashFiles('**/package.json', '**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-turbo-

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Test
        run: pnpm test

  deploy_presentation:
    name: Deploy Presentation Preview
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    needs: [ci, path_filter]
    outputs:
      preview_url: ${{ steps.deploy_vercel.outputs.preview_url }}
    if: needs.path_filter.outputs.presentation_changed == 'true'
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PRESENTATION_ID }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/package.json', '**/pnpm-lock.yaml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-${{ hashFiles('**/package.json', '**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-turbo-

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org
          cache: pnpm

      - name: Get npm global path
        run: |
          echo "NPM_GLOBAL_DIR=$(npm config get prefix)" >> $GITHUB_ENV

      - name: Cache global npm packages
        uses: actions/cache@v4
        id: npm-global-cache
        with:
          path: ${{ env.NPM_GLOBAL_DIR }}
          key: ${{ runner.os }}-npm-global-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-global-

      - name: Install Vercel CLI
        if: ${{ steps.npm-global-cache.outputs.cache-hit != 'true' }}
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Vercel
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project and Get URL
        id: deploy_vercel
        run: |
          # First deployment to get the URL
          DEPLOY_OUTPUT=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "$DEPLOY_OUTPUT"
          PREVIEW_URL=$(echo "$DEPLOY_OUTPUT" | grep -oE "https://[a-zA-Z0-9.-]+\.vercel\.app" | tail -n 1)
          echo "preview_url=$PREVIEW_URL" >> "$GITHUB_OUTPUT"
          
          # Redeploy with correct VITE_BASE_URL
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --env VITE_BASE_URL="$PREVIEW_URL"

  deploy_container:
    name: Deploy Container Preview
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    needs: [ci, path_filter, deploy_presentation]
    if: always() && needs.path_filter.outputs.container_changed == 'true' && (needs.deploy_presentation.result == 'success' || needs.deploy_presentation.result == 'skipped')
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_CONTAINER_ID }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/package.json', '**/pnpm-lock.yaml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-${{ hashFiles('**/package.json', '**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-turbo-

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org
          cache: pnpm

      - name: Get npm global path
        run: |
          echo "NPM_GLOBAL_DIR=$(npm config get prefix)" >> $GITHUB_ENV

      - name: Cache global npm packages
        uses: actions/cache@v4
        id: npm-global-cache
        with:
          path: ${{ env.NPM_GLOBAL_DIR }}
          key: ${{ runner.os }}-npm-global-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-global-

      - name: Install Vercel CLI
        if: ${{ steps.npm-global-cache.outputs.cache-hit != 'true' }}
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --git-branch=${{ github.head_ref }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Set Vercel Environment Variable
        run: |
          # Always ensure PRESENTATION_URL is set with a fallback
          if [ "${{ needs.deploy_presentation.result }}" = "success" ] && [ -n "${{ needs.deploy_presentation.outputs.preview_url }}" ]; then
            PRESENTATION_URL="${{ needs.deploy_presentation.outputs.preview_url }}"
          else
            # Use fallback URL if presentation deployment failed or was skipped
            PRESENTATION_URL="https://datn-fe-presentation.vercel.app"
          fi

          # Remove existing env var and add new one
          vercel env rm PRESENTATION_URL preview ${{ github.head_ref }} --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          echo "$PRESENTATION_URL" | vercel env add PRESENTATION_URL preview ${{ github.head_ref }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Generate vercel.json with dynamic rewrites
        run: |
          # Always ensure DESTINATION_URL is set with fallback
          if [ "${{ needs.deploy_presentation.result }}" = "success" ] && [ -n "${{ needs.deploy_presentation.outputs.preview_url }}" ]; then
            DESTINATION_URL="${{ needs.deploy_presentation.outputs.preview_url }}"
          else
            # Pull environment variables to get actual PRESENTATION_URL value
            vercel env pull .env.local --environment=preview --git-branch=${{ github.head_ref }} --token=${{ secrets.VERCEL_TOKEN }}
            DESTINATION_URL=$(grep PRESENTATION_URL .env.local | cut -d '=' -f2 | tr -d '"' 2>/dev/null || echo "")
            # Always use fallback if DESTINATION_URL is empty
            if [ -z "$DESTINATION_URL" ]; then
              DESTINATION_URL="https://datn-fe-presentation.vercel.app"
            fi
          fi

          cat <<EOF > container/vercel.json
          {
            "rewrites": [
                {
                    "source": "/vue-remote",
                    "destination": "$DESTINATION_URL"
                },
                {
                    "source": "/((?!api/).*)",
                    "destination": "/"
                }
            ]
          }
          EOF
          echo "Generated vercel.json with destination: $DESTINATION_URL"
          cat container/vercel.json

      - name: Build Vercel
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project and Get URL
        id: deploy_vercel
        run: |
          # Set PRESENTATION_URL for deployment
          if [ "${{ needs.deploy_presentation.result }}" = "success" ] && [ -n "${{ needs.deploy_presentation.outputs.preview_url }}" ]; then
            PRESENTATION_URL="${{ needs.deploy_presentation.outputs.preview_url }}"
          else
            # Pull environment variables to get actual PRESENTATION_URL value
            vercel env pull .env.local --environment=preview --git-branch=${{ github.head_ref }} --token=${{ secrets.VERCEL_TOKEN }}
            PRESENTATION_URL=$(grep PRESENTATION_URL .env.local | cut -d '=' -f2 | tr -d '"' || echo "https://datn-fe-presentation.vercel.app")
          fi

          DEPLOY_OUTPUT=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --env PRESENTATION_URL="$PRESENTATION_URL")
          echo "$DEPLOY_OUTPUT"
          PREVIEW_URL=$(echo "$DEPLOY_OUTPUT" | grep -oE "https://[a-zA-Z0-9.-]+\.vercel\.app" | tail -n 1)
          echo "preview_url=$PREVIEW_URL" >> "$GITHUB_OUTPUT"

      - name: Delete Previous Comments
        uses: actions/github-script@v6
        with:
          script: |
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            for (const comment of comments.data) {
              if (comment.body.includes('Vercel') && comment.user.login === 'github-actions[bot]') {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id
                });
              }
            }

      - name: Add PR Comment
        if: steps.deploy_vercel.outputs.preview_url != ''
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Vercel Preview: ${{ steps.deploy_vercel.outputs.preview_url }}`
            })
