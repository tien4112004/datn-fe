export default {
  detail: {
    notFound: 'Class not found',
    notFoundDescription: 'The class you are looking for does not exist.',
    loading: 'Loading...',
    academicYear: 'Academic Year',
    classroom: 'Classroom',
    status: {
      active: 'Active',
      inactive: 'Inactive',
    },
    actions: {
      edit: 'Edit',
    },
    stats: {
      students: 'Students',
      available: 'available',
      homeroomTeacher: 'Homeroom Teacher',
      noHomeroomTeacher: 'No homeroom teacher assigned',
      subjectTeachers: 'Subject Teachers',
      subjects: 'subjects',
    },
    tabs: {
      teaching: 'Teaching',
      schedule: 'Schedule',
      lessons: 'Lessons',
      overview: 'Overview',
      students: 'Students',
      teachers: 'Teachers',
      settings: 'Settings',
    },
    overview: {
      basicInfo: 'Basic Information',
      className: 'Class Name',
      grade: 'Grade',
      capacity: 'Capacity',
      status: 'Status',
      description: 'Description',
    },
    settings: {
      title: 'Class Settings',
      status: 'Status',
      currentStatus: 'Current status',
      deactivateClass: 'Deactivate Class',
      activateClass: 'Activate Class',
      capacityManagement: 'Capacity Management',
      currentCapacity: 'Current capacity',
      students: 'students',
      updateCapacity: 'Update Capacity',
      currentAcademicYear: 'Current academic year',
      changeAcademicYear: 'Change Academic Year',
      dangerZone: 'Danger Zone',
      deleteWarning: 'Permanently delete this class. This action cannot be undone.',
      deleteClass: 'Delete Class',
    },
    students: {
      title: 'Students ({{count}})',
      noStudents: 'No students enrolled',
      listView: 'List View',
      seatingChartView: 'Seating Chart View',
      saveLayout: 'Save Layout',
      saving: 'Saving...',
      unassignedStudents: 'Unassigned Students',
      emptySeat: 'Empty Seat',
      loadingSeatingChart: 'Loading seating chart...',
      errorSeatingChart: 'Failed to load seating chart.',
      columns: 'Columns',
      rows: 'Rows',
      applyLayout: 'Apply Layout',
      layoutConfiguration: 'Layout Configuration',
      allStudentsAssigned: 'All students assigned',
    },
    teachers: {
      homeroomTeacher: 'Homeroom Teacher',
      noHomeroomTeacher: 'No homeroom teacher assigned',
      subjectTeachers: 'Subject Teachers ({{count}})',
      noSubjectTeachers: 'No subject teachers assigned',
      homeroom: 'Homeroom',
      main: 'Main',
    },
  },
  list: {
    title: 'Classes',
  },
  table: {
    columns: {
      name: 'Name',
      grade: 'Grade',
      academicYear: 'Academic Year',
      enrollment: 'Enrollment',
      homeroomTeacher: 'Homeroom Teacher',
      classroom: 'Classroom',
      status: 'Status',
      noHomeroomTeacher: 'No teacher assigned',
    },
    actions: {
      manageStudents: 'Manage Students',
    },
    noClasses: 'No classes found',
  },
  grid: {
    academicYear: 'Academic Year',
    enrollment: 'Enrollment',
    homeroomTeacher: 'Homeroom Teacher',
    noHomeroomTeacher: 'No teacher assigned',
    classroom: 'Classroom',
    subjectTeachers: 'Subject Teachers',
    actions: {
      manageStudents: 'Manage Students',
    },
    error: 'Failed to load classes',
    noClasses: 'No classes found',
    pagination: {
      showing: 'Showing {{start}} to {{end}} of {{total}} classes',
    },
  },
  controls: {
    welcome: 'Welcome back!',
    description: 'Manage your classes and track student progress',
    createClass: 'Create Class',
    viewToggle: {
      listView: 'List view',
      gridView: 'Grid view',
    },
  },
  filters: {
    search: {
      placeholder: 'Search by class name...',
    },
    grade: {
      placeholder: 'Select grade',
    },
    academicYear: {
      placeholder: 'Select academic year',
    },
    status: {
      placeholder: 'Select status',
      active: 'Active',
      inactive: 'Inactive',
    },
    clearFilters: 'Clear Filters',
  },
  dashboard: {
    today: {
      title: "Today's Teaching Dashboard",
      urgentTasks: 'urgent tasks',
      stats: {
        periodsToday: 'Periods Today',
        lessonsCompleted: 'Lessons Completed',
        objectivesAchieved: 'Objectives Achieved',
        resourcesPrepared: 'Resources Prepared',
      },
      tabs: {
        overview: 'Overview',
        schedule: 'Schedule',
        lessons: 'Lessons',
        objectives: 'Objectives',
        resources: 'Resources',
      },
      quickActions: 'Quick Actions',
      actions: {
        startCurrentLesson: 'Start Current Lesson',
        prepareNextLesson: 'Prepare Next Lesson',
        reviewObjectives: 'Review Objectives',
      },
      noCurrentLesson: 'No current lesson',
      selectLessonToViewObjectives: 'Select a lesson to view objectives',
      selectLessonToViewResources: 'Select a lesson to view resources',
      todayObjectivesSummary: "Today's Objectives Summary",
      todayResourcesSummary: "Today's Resources Summary",
      achieved: 'achieved',
      prepared: 'prepared',
      required: 'required',
    },
  },
  schedule: {
    daily: {
      title: 'Daily Schedule',
      scheduleFor: 'Schedule for',
      noClassesToday: 'No classes today',
      actions: {
        addPeriod: 'Add Period',
        addFirstPeriod: 'Add First Period',
        viewCurrent: 'View Current',
        prepare: 'Prepare',
      },
      status: {
        current: 'Current',
        completed: 'Completed',
        upcoming: 'Upcoming',
        scheduled: 'Scheduled',
      },
      room: 'Room',
      hasLessonPlan: 'Has lesson plan',
      stats: {
        totalPeriods: 'Total Periods',
        completed: 'Completed',
        remaining: 'Remaining',
        withLessonPlan: 'With Lesson Plan',
      },
    },
    currentNext: {
      currentClass: 'Current Class',
      nextClass: 'Next Class',
      noCurrentClass: 'No current class',
      noNextClass: 'No next class',
      room: 'Room',
      startsIn: 'Starts in',
      status: {
        inProgress: 'In Progress',
        scheduled: 'Scheduled',
        soon: 'Soon',
      },
      actions: {
        viewLesson: 'View Lesson',
        prepareLesson: 'Prepare Lesson',
      },
      timeFormat: {
        minutes: '{{count}} minutes',
        hoursMinutes: '{{hours}}h {{minutes}}m',
      },
    },
    timeManagement: {
      title: 'Time Management',
      elapsed: 'Elapsed',
      remaining: 'Remaining',
      breakTime: 'Break Time',
      untilNext: 'Until next',
      nextPeriod: 'Next Period',
      startsIn: 'Starts in',
      phases: {
        before: 'Before Class',
        during: 'During Class',
        break: 'Break',
        after: 'After Class',
      },
      actions: {
        pause: 'Pause',
        resume: 'Resume',
        reset: 'Reset',
      },
      stats: {
        progress: 'Progress',
        totalMinutes: 'Total Minutes',
        elapsed: 'Elapsed (min)',
        remaining: 'Remaining (min)',
      },
    },
    subjectContext: {
      title: 'Subject Context',
      selectSubject: 'Select a subject',
      periodsPerWeek: 'periods/week',
      teacher: 'Teacher',
      schedule: 'Schedule',
      lessonPlanning: 'Lesson Planning',
      recentPlan: 'Recent plan',
      noRecentPlan: 'No recent plan',
      upcomingDeadlines: 'Upcoming Deadlines',
      deadlines: 'deadlines',
      allCaught: 'All caught up',
      next: 'Next',
      actions: {
        createLesson: 'Create Lesson',
        manageSchedule: 'Manage Schedule',
        viewAllLessons: 'View All Lessons',
        viewSchedule: 'View Schedule',
        prepareNext: 'Prepare Next',
        viewDeadlines: 'View Deadlines',
      },
    },
  },
  lessonPlan: {
    creator: {
      sections: {
        basicInfo: 'Basic Information',
        objectives: 'Learning Objectives',
        resources: 'Resources',
        notes: 'Notes',
      },
      fields: {
        title: 'Title',
        subject: 'Subject',
        date: 'Date',
        preparationTime: 'Preparation Time',
        startTime: 'Start Time',
        endTime: 'End Time',
        description: 'Description',
        objectiveDescription: 'Objective Description',
        objectiveType: 'Objective Type',
        resourceName: 'Resource Name',
        resourceType: 'Resource Type',
        resourceUrl: 'Resource URL',
        resourceDescription: 'Resource Description',
        isRequired: 'Is Required',
        isPrepared: 'Is Prepared',
      },
      placeholders: {
        title: 'Enter lesson title',
        subject: 'Enter subject name',
        description: 'Enter lesson description',
        objectiveDescription: 'Describe the learning objective',
        resourceName: 'Enter resource name',
        resourceUrl: 'Enter resource URL',
        resourceDescription: 'Enter resource description',
        notes: 'Add any notes or additional information',
      },
      objectiveTypes: {
        knowledge: 'Knowledge',
        skill: 'Skill',
        attitude: 'Attitude',
        competency: 'Competency',
      },
      resourceTypes: {
        presentation: 'Presentation',
        mindmap: 'Mind Map',
        document: 'Document',
        video: 'Video',
        audio: 'Audio',
        image: 'Image',
        worksheet: 'Worksheet',
        equipment: 'Equipment',
        other: 'Other',
      },
      actions: {
        addObjective: 'Add Objective',
        addResource: 'Add Resource',
        addFirstResource: 'Add First Resource',
        cancel: 'Cancel',
        save: 'Save',
        saving: 'Saving...',
      },
      duration: 'Duration',
      minutes: 'minutes',
      objective: 'Objective',
      resource: 'Resource',
      noResources: 'No resources added yet',
    },
    status: {
      title: 'Lesson Status Tracker',
      completionRate: 'Completion Rate',
      completed: 'Completed',
      lessonList: 'Lesson List',
      noLessons: 'No lessons found',
      overdue: 'Overdue',
      statuses: {
        planned: 'Planned',
        inProgress: 'In Progress',
        completed: 'Completed',
        cancelled: 'Cancelled',
      },
      minutes: 'minutes',
      objectives: 'objectives',
      objectivesAchieved: 'objectives achieved',
      resourcesPrepared: 'resources prepared',
      notes: 'Notes',
      updateStatus: 'Update Status',
      newStatus: 'New Status',
      addStatusNotes: 'Add status notes...',
      cancel: 'Cancel',
      weeklyOverview: 'Weekly Overview',
    },
    objectives: {
      title: 'Learning Objectives',
      overallProgress: 'Overall Progress',
      achieved: 'Achieved',
      individualObjectives: 'Individual Objectives',
      notes: 'Notes',
      addNote: 'Add note...',
      save: 'Save',
      cancel: 'Cancel',
      noNotes: 'No notes available',
      noObjectives: 'No learning objectives available',
      createdAt: 'Created at',
      stats: {
        achieved: 'Achieved',
        remaining: 'Remaining',
        completion: 'Completion',
      },
      types: {
        knowledge: 'Knowledge',
        skill: 'Skill',
        attitude: 'Attitude',
        competency: 'Competency',
      },
    },
    resources: {
      title: 'Resources',
      preparationProgress: 'Preparation Progress',
      prepared: 'Prepared',
      stats: {
        total: 'Total Resources',
        prepared: 'Prepared',
        required: 'Required',
        completion: 'Completion',
      },
      resourceList: 'Resource List',
      noResources: 'No resources added yet',
      required: 'Required',
      resourceDistribution: 'Resource Distribution',
      actions: {
        addResource: 'Add Resource',
        addFirstResource: 'Add First Resource',
        openLink: 'Open Link',
        download: 'Download',
        markPrepared: 'Mark as Prepared',
        markUnprepared: 'Mark as Unprepared',
        cancel: 'Cancel',
        add: 'Add',
      },
      fields: {
        name: 'Resource Name',
        type: 'Resource Type',
        url: 'URL',
        file: 'Upload File',
        description: 'Description',
        isRequired: 'Is Required',
        isPrepared: 'Is Prepared',
      },
      placeholders: {
        name: 'Enter resource name',
        url: 'Enter resource URL (optional)',
        description: 'Enter resource description (optional)',
      },
      types: {
        presentation: 'Presentation',
        mindmap: 'Mind Map',
        document: 'Document',
        video: 'Video',
        audio: 'Audio',
        image: 'Image',
        worksheet: 'Worksheet',
        equipment: 'Equipment',
        other: 'Other',
      },
    },
  },
  integration: {
    scheduleLesson: {
      title: 'Schedule-Lesson Integration',
      linkingProgress: 'Linking Progress',
      periodsLinked: 'periods linked',
      stats: {
        totalPeriods: 'Total Periods',
        linkedPeriods: 'Linked Periods',
        unlinkedPeriods: 'Unlinked Periods',
        unlinkedLessons: 'Unlinked Lessons',
      },
      periodLessonMapping: 'Period-Lesson Mapping',
      objectives: 'objectives',
      resources: 'resources',
      linked: 'Linked',
      unlinked: 'Unlinked',
      noLessonLinked: 'No lesson plan linked to this period',
      unlinkedLessons: 'Unlinked Lesson Plans',
      linkLessonToPeriod: 'Link Lesson to Period',
      periodDetails: 'Period Details',
      subject: 'Subject',
      time: 'Time',
      teacher: 'Teacher',
      day: 'Day',
      selectLesson: 'Select Lesson Plan',
      noAvailableLessons: 'No matching lesson plans available for this period',
      chooseLessonPlan: 'Choose a lesson plan',
      actions: {
        link: 'Link',
        unlink: 'Unlink',
        create: 'Create New',
        cancel: 'Cancel',
        linkLesson: 'Link Lesson',
        linking: 'Linking...',
      },
    },
  },
  calendar: {
    title: 'Class Calendar',
    today: 'Today',
    previousMonth: 'Previous month',
    nextMonth: 'Next month',
    noEvents: 'No events',
    more: 'more',
    moreEvents: '{{count}} more event',
    moreEvents_other: '{{count}} more events',

    weekdays: {
      sunday: 'Sun',
      monday: 'Mon',
      tuesday: 'Tue',
      wednesday: 'Wed',
      thursday: 'Thu',
      friday: 'Fri',
      saturday: 'Sat',
    },

    categories: {
      assignment: 'Assignment',
      exam: 'Exam',
      fieldTrip: 'Field Trip',
      meeting: 'Meeting',
      holiday: 'Holiday',
      presentation: 'Presentation',
      other: 'Other',
    },

    fields: {
      date: 'Date',
      time: 'Time',
      location: 'Location',
      description: 'Description',
      category: 'Category',
    },

    errors: {
      invalidClassId: 'Invalid class ID',
      loadFailed: 'Failed to load calendar events',
    },
  },
  roster: {
    title: 'Class Roster',
    addStudent: 'Add Student',
    addFirstStudent: 'Add First Student',
    editStudent: 'Edit Student',
    deleteStudent: 'Remove Student',
    noStudents: 'No students in this class yet',
    loadingRoster: 'Loading roster...',
    studentCount: '{{count}} student',
    studentCount_other: '{{count}} students',

    form: {
      // Dialog descriptions
      createDescription: 'Fill in the required information to add a new student to the class roster.',
      editDescription: 'Update the student information below. Required fields are marked with *.',
      requiredInformation: 'Required Information',
      optionalInformation: 'Optional Information',

      // Field labels
      firstName: 'First Name',
      lastName: 'Last Name',
      studentCode: 'Student ID',
      email: 'Email Address',
      phone: 'Phone Number',
      address: 'Address',
      parentName: 'Parent/Guardian Name',
      parentPhone: 'Parent/Guardian Phone',
      dateOfBirth: 'Date of Birth',
      gender: 'Gender',

      // Placeholders
      firstNamePlaceholder: 'Enter first name',
      lastNamePlaceholder: 'Enter last name',
      studentCodePlaceholder: 'Enter student ID',
      emailPlaceholder: 'student@example.com',
      phonePlaceholder: 'Enter phone number',
      addressPlaceholder: 'Enter address',
      parentNamePlaceholder: 'Enter parent/guardian name',
      parentPhonePlaceholder: 'Enter parent/guardian phone',
      genderPlaceholder: 'Select gender',

      // Gender options
      genderMale: 'Male',
      genderFemale: 'Female',
      genderOther: 'Other',

      // Form states
      required: 'Required',
      optional: 'Optional',
      submit: 'Add',
      save: 'Save',
      saving: 'Saving...',
      cancel: 'Cancel',
      close: 'Close',
    },

    validation: {
      firstNameRequired: 'First name is required',
      firstNameTooLong: 'First name must be 100 characters or less',
      lastNameRequired: 'Last name is required',
      lastNameTooLong: 'Last name must be 100 characters or less',
      studentCodeRequired: 'Student ID is required',
      studentCodeTooLong: 'Student ID must be 50 characters or less',
      studentCodeDuplicate: 'This student ID is already in use',
      emailRequired: 'Email address is required',
      emailInvalid: 'Please enter a valid email address',
      emailTooLong: 'Email address must be 255 characters or less',
      phoneTooLong: 'Phone number must be 20 characters or less',
      addressTooLong: 'Address must be 500 characters or less',
      parentNameTooLong: 'Parent/Guardian name must be 100 characters or less',
      parentPhoneTooLong: 'Parent/Guardian phone must be 20 characters or less',
      dateOfBirthInvalid: 'Please enter a valid date',
      genderInvalid: 'Please select a valid gender',
    },

    table: {
      fullName: 'Full Name',
      studentCode: 'Student ID',
      email: 'Email',
      status: 'Status',
      actions: 'Actions',
      edit: 'Edit',
      delete: 'Delete',
      statusActive: 'Active',
      statusTransferred: 'Transferred',
      statusGraduated: 'Graduated',
      statusDropped: 'Dropped',
    },

    confirmation: {
      deleteTitle: 'Remove Student',
      deleteMessage: 'Are you sure you want to remove {{studentName}} from the class?',
      deleteWarning: 'This action cannot be undone.',
      confirm: 'Remove Student',
      deleting: 'Removing...',
      cancel: 'Cancel',
    },

    messages: {
      addSuccess: 'Student added successfully',
      addError: 'Failed to add student',
      updateSuccess: 'Student updated successfully',
      updateError: 'Failed to update student',
      deleteSuccess: 'Student removed successfully',
      deleteError: 'Failed to remove student',
      networkError: 'Network error. Please check your connection and try again.',
      validationError: 'Please fix the errors in the form before submitting.',
      duplicateError: 'A student with this ID already exists in the class.',
    },
  },

  csvImport: {
    button: 'Import from CSV',
    buttonText: 'Import Students',

    modal: {
      titleIdle: 'Import Students from CSV',
      titleParsing: 'Analyzing File...',
      titleParsed: 'Preview Import',
      titleSubmitting: 'Importing Students...',
      titleSuccess: 'Import Complete',
      titleError: 'Import Failed',

      descriptionIdle: 'Upload a CSV file to quickly add multiple students to your class.',
      descriptionParsing: 'Please wait while we analyze your file...',
      descriptionParsed: 'Review the data below. Click Import to proceed.',
      descriptionSubmitting: 'Processing your data. This may take a few moments...',
      descriptionSuccess: 'All students have been successfully imported to your class.',
      descriptionError:
        'There was an error importing your students. Please review the errors below and try again.',

      downloadTemplate: 'Download Template',
      close: 'Close',
      tryAgain: 'Try Again',
      importing: 'Importing...',
      import: 'Import',

      parsingFile: 'Parsing CSV file...',
      csvValidationFailed: 'CSV Validation Failed',
      warningsTitle: 'Warnings',
      importingStudents: 'Importing students to your class...',
      autoCloseMessage: 'The modal will close automatically',
    },

    toast: {
      importSuccess: 'Successfully imported {{count}} student(s)',
      importFailed: 'Failed to import students',
      parseError: 'Failed to parse CSV file',
      genericError: 'An error occurred. Please try again.',
      invalidCsvFormat: 'Invalid CSV format',
    },

    upload: {
      dragDropText: 'Drop your CSV file here, or click to browse',
      dropFileHere: 'Drop your file here',
      failedValidation: 'File validation failed',
      maxFileSize: 'Maximum file size: 5 MB',
      uploadingFile: 'Uploading file...',
      invalidFileType: 'Invalid file type',
      fileTooLarge: 'File too large',
      emptyFile: 'Empty file',
      malformedCsv: 'Malformed CSV',
      missingColumns: 'Missing required columns',
      noDataRows: 'No data rows',
      fileUploadAreaLabel: 'File upload area',
      uploadCsvFileLabel: 'Upload CSV file',
    },

    fileErrors: {
      invalidMimeType: 'Invalid file type',
      invalidMimeTypeMessage: 'Please upload a CSV file (.csv)',
      fileTooLarge: 'File too large',
      fileTooLargeMessage: 'Your file exceeds the 5 MB limit. Please choose a smaller file.',
      emptyFile: 'Empty file',
      emptyFileMessage: 'The file you uploaded is empty. Please try again with a valid CSV file.',
    },

    parseErrors: {
      malformedCsv: 'Malformed CSV',
      malformedCsvMessage: 'The CSV file has formatting issues and cannot be processed.',
      missingHeaders: 'Missing required columns',
      missingHeadersMessage: 'Your CSV file is missing one or more required columns.',
      emptyData: 'Empty file',
      emptyDataMessage: 'The CSV file contains no data. Please check your file and try again.',
      noDataRows: 'No data rows',
      noDataRowsMessage: 'Your CSV file only contains headers but no student data.',
      recoveryTips: 'Recovery Tips:',
      tip1: 'Ensure your CSV file has a header row with column names',
      tip2: 'Verify all required columns are present (First Name, Last Name, Email)',
      tip3: 'Check that each row has the same number of columns as the header',
      tip4: 'Ensure the file is properly formatted as CSV',
      downloadTemplate: 'Download a template CSV file to get started',
    },

    preview: {
      title: 'Data Preview',
      subtitle: 'Review the first 50 rows of your import',
      validRows: 'valid row',
      validRows_other: 'valid rows',
      rowsWithWarnings: 'row with warnings',
      rowsWithWarnings_other: 'rows with warnings',
      showingOf: 'Showing {{showing}} of {{total}} row',
      showingOf_other: 'Showing {{showing}} of {{total}} rows',
      missingRequiredFields: 'row has missing required fields',
      missingRequiredFields_other: 'rows have missing required fields',
      fixCsvAndTryAgain: 'Please fix the CSV file and try again.',
      noDataToPreview: 'No data to preview',
      rowNumber: 'Row number',
      firstName: 'First Name',
      lastName: 'Last Name',
      email: 'Email',
      dateOfBirth: 'Date of Birth',
      phone: 'Phone',
      parentGuardian: 'Parent/Guardian',
      missing: 'Missing',
      rowHasErrors: 'This row has errors',
      warningTitle: '{{count}} row has missing required fields',
      warningTitle_other: '{{count}} rows have missing required fields',
      warningMessage: 'These rows will not be imported. Please fix the CSV file and try again.',
    },

    errors: {
      title: 'Import Errors',
      errorGrouping: 'Errors grouped by row',
      summary: 'Summary:',
      affectedRows: '{{count}} row affected',
      affectedRows_other: '{{count}} rows affected',
      errorDetails: 'Error Details:',
      fieldError: 'Field: {{field}}',
      errorMessage: 'Error: {{error}}',
      recoveryTips: 'Recovery Tips:',
      for: 'For {{errorType}} errors:',
      missingFieldTip: 'Ensure all required fields contain data',
      invalidFormatTip: 'Verify the data format matches the requirements',
      emailFormatTip: 'Email addresses must follow a valid format (e.g., user@example.com)',
      duplicateTip: 'Check for duplicate email addresses in your CSV',
      errorTitleInvalidFormat: 'Invalid CSV Format',
      errorTitleMissingHeaders: 'Missing Required Columns',
      errorTitleEmptyFile: 'Empty File',
      errorTitleNoDataRows: 'No Data Found',
      errorTitleValidationError: 'Validation Error',
      howToFix: 'How to fix:',
      fixMalformedCsv1: 'Check that your file is a valid CSV format',
      fixMalformedCsv2: 'Ensure all rows have the same number of columns',
      fixMalformedCsv3: 'Remove any special formatting or merged cells',
      fixMalformedCsv4: 'Try opening the file in a text editor to check for issues',
      fixMissingHeaders1: 'Ensure your CSV has a header row with column names',
      fixMissingHeaders2: 'Required columns: First Name, Last Name, Email',
      fixMissingHeaders3: 'Column headers are case-insensitive',
      fixMissingHeaders4: 'Accepted variations: "FirstName", "first_name", "FIRST NAME", etc.',
      fixEmptyFile1: 'The file contains no data',
      fixEmptyFile2: 'Check that you selected the correct file',
      fixEmptyFile3: 'Ensure the file is not corrupted',
      fixNoDataRows1: 'The CSV has headers but no data rows',
      fixNoDataRows2: 'Add at least one student record below the header row',
      fixNoDataRows3: 'Check that rows are not hidden or filtered out',
      fixDefaultError: 'Please check your CSV file and try again',
    },

    requirements: {
      title: 'Format Requirements',
      fileConstraints: 'File Constraints',
      maxFileSize: 'Maximum file size: 5 MB',
      fileFormat: 'File format: CSV (.csv)',
      maxRows: 'Maximum rows: 1,000 students per import',
      encoding: 'Encoding: UTF-8 (recommended)',
      requiredColumns: 'Required Columns',
      columnFirstName: 'First Name',
      columnFirstNameDescription:
        'Student\'s first name. Cannot be empty. Accepts spaces and special characters (e.g., "Mary-Jane", "José").',
      columnLastName: 'Last Name',
      columnLastNameDescription:
        "Student's last name. Cannot be empty. Accepts hyphens and special characters.",
      columnEmail: 'Email',
      columnEmailDescription:
        "Student's email address. Must be unique per class. Must follow valid email format.",
      optionalColumns: 'Optional Columns',
      columnDateOfBirth: 'Date of Birth',
      columnDateOfBirthDescription: 'Date format: YYYY-MM-DD (e.g., "2010-03-15")',
      columnPhone: 'Phone',
      columnPhoneDescription: 'Contact phone number. Accepts numbers, spaces, and hyphens.',
      columnParentName: 'Parent/Guardian Name',
      columnParentNameDescription: 'Name of parent or guardian.',
      columnParentEmail: 'Parent/Guardian Email',
      columnParentEmailDescription: 'Email address of parent or guardian.',
      columnHeaderVariations: 'Header Variations',
      headerVariationsDescription:
        'Your CSV columns can use different variations of these names (case-insensitive):',
      firstNameVariations:
        'First Name variations: First Name, FirstName, First, Fname, GivenName, GivenName, Forename',
      lastNameVariations:
        'Last Name variations: Last Name, LastName, Last, Lname, Surname, FamilyName, Family Name',
      emailVariations: 'Email variations: Email, Email Address, EmailAddress, E-Mail, Email Address',
      csvExample: 'CSV Example',
      exampleDescription: "Here's an example of a properly formatted CSV file:",
      tips: 'Tips for Success',
      tip1: 'Keep your CSV file simple with columns only for data you have',
      tip2: 'Use UTF-8 encoding to properly handle special characters and accents',
      tip3: 'Avoid extra blank columns or rows',
      tip4: 'Test with a small batch first before importing large files',
      tip5: 'Email addresses must be unique; duplicates will cause import to fail',
      tip6: 'You can download our template to see the correct format',
      downloadTemplate: 'Download Template',
    },

    progress: {
      parsing: 'Analyzing file...',
      submitting: 'Importing students...',
      mayTakeMoments: 'This may take a few moments...',
      pleaseWait: 'Please wait',
    },

    success: {
      title: 'Success!',
      message: 'Successfully imported {{count}} student',
      message_other: 'Successfully imported {{count}} students',
      subMessage: 'All students have been added to your class roster.',
      closingIn: 'Closing in {{seconds}} second',
      closingIn_other: 'Closing in {{seconds}} seconds',
    },

    backend: {
      validationFailed: 'Data validation failed',
      duplicateEmail: 'Email already exists',
      duplicateStudentCode: 'Student ID already exists',
      unauthorized: "You don't have permission to import students",
      serverError: 'Server error occurred',
      networkError: 'Network error. Please check your connection and try again.',
      unexpectedError: 'An unexpected error occurred. Please try again.',
    },
  },
};
